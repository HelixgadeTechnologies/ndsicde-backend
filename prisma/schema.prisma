// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//MODEL
model User {
  userId              String    @id @default(uuid())
  fullName            String?
  email               String?   @unique
  address             String?
  phoneNumber         String?
  role                Role?     @relation(fields: [roleId], references: [roleId])
  roleId              String?
  status              String?
  assignedProjectId   String?
  department          String?
  community           String?
  state               String?
  localGovernmentArea String?
  password            String?
  profilePic          String?
  profilePicMimeType  String?
  loginLast           DateTime?
  createAt            DateTime? @default(now())
  updateAt            DateTime? @default(now())

  @@map("users")
}

model GeneralSettings {
  generalSettingsId   String    @id @default(uuid())
  organizationName    String?
  contactEmail        String?
  contactPhone        String?
  website             String?
  organizationLogo    String?
  defaultCurrency     String?
  defaultTimeZone     String?
  dateRetentionPolicy String?
  auditLogRetention   String?
  emailNotification   Boolean?
  maintenanceAlert    Boolean?
  createAt            DateTime? @default(now())
  updateAt            DateTime? @default(now())

  @@map("generalsettings")
}

model Role {
  roleId      String    @id @default(uuid())
  roleName    String?
  description String?
  permission  String?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @default(now())
  users       User[]

  @@map("role")
}

model StrategicObjective {
  strategicObjectiveId String    @id @default(uuid())
  statement            String?
  thematicAreas        String?
  pillarLead           String?
  status               String?
  createAt             DateTime? @default(now())
  updateAt             DateTime? @default(now())
  kpi                  Kpi[]
  project              Project[]

  @@map("strategicObjective")
}

model Kpi {
  kpiId                String              @id @default(uuid())
  statement            String?
  definition           String?
  type                 String?
  specificAreas        String?
  unitOfMeasure        String?
  itemInMeasure        String?
  disaggregation       String?
  baseLine             String?
  target               String?
  strategicObjective   StrategicObjective? @relation(fields: [strategicObjectiveId], references: [strategicObjectiveId])
  strategicObjectiveId String?
  createAt             DateTime?           @default(now())
  updateAt             DateTime?           @default(now())

  @@map("kpi")
}

model Project {
  projectId             String              @id @default(uuid())
  projectName           String?
  budgetCurrency        String?
  totalBudgetAmount     String?
  startDate             DateTime?           @default(now())
  endDate               DateTime?           @default(now())
  country               String?
  state                 String?
  localGovernment       String?
  community             String?
  thematicAreasOrPillar String?
  status                String?
  strategicObjective    StrategicObjective? @relation(fields: [strategicObjectiveId], references: [strategicObjectiveId])
  strategicObjectiveId  String?
  createAt              DateTime?           @default(now())
  updateAt              DateTime?           @default(now())
  teamMember            TeamMember[]
  partner               Partner[]
  impact                Impact[]
  outcome               Outcome[]
  output                Output[]
  activity              Activity[]
  logicalFramework      LogicalFramework[]
  request               Request[]

  @@map("project")
}

model TeamMember {
  teamMemberId String    @id @default(uuid())
  email        String
  roleId       String
  project      Project?  @relation(fields: [projectId], references: [projectId])
  projectId    String?
  createAt     DateTime? @default(now())
  updateAt     DateTime? @default(now())

  @@map("teammember")
}

model Partner {
  partnerId        String    @id @default(uuid())
  organizationName String
  email            String
  roleId           String
  project          Project?  @relation(fields: [projectId], references: [projectId])
  projectId        String?
  createAt         DateTime? @default(now())
  updateAt         DateTime? @default(now())

  @@map("partner")
}

// IMPACT RELATION

model Impact {
  impactId          String            @id @default(uuid())
  statement         String
  thematicArea      String
  responsiblePerson String
  project           Project?          @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?         @default(now())
  updateAt          DateTime?         @default(now())
  impactIndicator   ImpactIndicator[]
  outcome           Outcome[]

  @@map("impact")
}

model ImpactIndicator {
  impactIndicatorId           String                        @id @default(uuid())
  indicatorSource             String?
  thematicAreasOrPillar       String?
  statement                   String?
  linkKpiToSdnOrgKpi          String?
  definition                  String?
  specificArea                String?
  unitOfMeasure               String?
  itemInMeasure               String?
  disaggregation              String?
  baseLineDate                DateTime?
  cumulativeValue             String?
  baselineNarrative           String?
  targetDate                  DateTime?
  cumulativeTarget            String?
  targetNarrative             String?
  targetType                  String?
  responsiblePersons          String?
  createAt                    DateTime?                     @default(now())
  updateAt                    DateTime?                     @default(now())
  impact                      Impact?                       @relation(fields: [impactId], references: [impactId])
  impactId                    String?
  impactIndicatorReportFormat ImpactIndicatorReportFormat[]

  @@map("impactindicator")
}

model ImpactIndicatorReportFormat {
  impactIndicatorReportFormatId String           @id @default(uuid())
  indicatorSource               String?
  thematicAreasOrPillar         String?
  indicatorStatement            String?
  responsiblePersons            String?
  disaggregationType            String?
  linkKpiToSdnOrgKpi            String?
  definition                    String?
  specificArea                  String?
  unitOfMeasure                 String?
  itemInMeasure                 String?
  actualDate                    DateTime?
  cumulativeActual              String?
  actualNarrative               String?
  attachmentUrl                 String?
  createAt                      DateTime?        @default(now())
  updateAt                      DateTime?        @default(now())
  impactIndicator               ImpactIndicator? @relation(fields: [impactIndicatorId], references: [impactIndicatorId])
  impactIndicatorId             String?

  @@map("impactindicatorreportformat")
}

// OUTCOME RELATION

model Outcome {
  outcomeId         String             @id @default(uuid())
  outcomeStatement  String
  outcomeType       String
  impact            Impact?            @relation(fields: [impactId], references: [impactId])
  impactId          String?
  thematicAreas     String?
  responsiblePerson String
  project           Project?           @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?          @default(now())
  updateAt          DateTime?          @default(now())
  outcomeIndicator  OutcomeIndicator[]
  output            Output[]

  @@map("outcome")
}

model OutcomeIndicator {
  outcomeIndicatorId           String                         @id @default(uuid())
  indicatorSource              String?
  thematicAreasOrPillar        String?
  statement                    String?
  linkKpiToSdnOrgKpi           String?
  definition                   String?
  specificArea                 String?
  unitOfMeasure                String?
  itemInMeasure                String?
  disaggregation               String?
  baseLineDate                 DateTime?
  cumulativeValue              String?
  baselineNarrative            String?
  targetDate                   DateTime?
  cumulativeTarget             String?
  targetNarrative              String?
  targetType                   String?
  responsiblePersons           String?
  createAt                     DateTime?                      @default(now())
  updateAt                     DateTime?                      @default(now())
  outcome                      Outcome?                       @relation(fields: [outcomeId], references: [outcomeId])
  outcomeId                    String?
  outcomeIndicatorReportFormat OutcomeIndicatorReportFormat[]

  @@map("outcomeindicator")
}

model OutcomeIndicatorReportFormat {
  outcomeIndicatorReportFormatId String            @id @default(uuid())
  indicatorSource                String?
  thematicAreasOrPillar          String?
  indicatorStatement             String?
  responsiblePersons             String?
  disaggregationType             String?
  linkKpiToSdnOrgKpi             String?
  definition                     String?
  specificArea                   String?
  unitOfMeasure                  String?
  itemInMeasure                  String?
  actualDate                     DateTime?
  cumulativeActual               String?
  actualNarrative                String?
  attachmentUrl                  String?
  createAt                       DateTime?         @default(now())
  updateAt                       DateTime?         @default(now())
  outcomeIndicator               OutcomeIndicator? @relation(fields: [outcomeIndicatorId], references: [outcomeIndicatorId])
  outcomeIndicatorId             String?

  @@map("outcomeindicatorreportformat")
}

// OUTPUT Relation

model Output {
  outputId          String            @id @default(uuid())
  outputStatement   String
  outcome           Outcome?          @relation(fields: [outcomeId], references: [outcomeId])
  outcomeId         String?
  thematicAreas     String?
  responsiblePerson String
  project           Project?          @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?         @default(now())
  updateAt          DateTime?         @default(now())
  outputIndicator   OutputIndicator[]
  activity          Activity[]
  request           Request[]

  @@map("output")
}

model OutputIndicator {
  outputIndicatorId           String                        @id @default(uuid())
  indicatorSource             String?
  thematicAreasOrPillar       String?
  statement                   String?
  linkKpiToSdnOrgKpi          String?
  definition                  String?
  specificArea                String?
  unitOfMeasure               String?
  itemInMeasure               String?
  disaggregation              String?
  baseLineDate                DateTime?
  cumulativeValue             String?
  baselineNarrative           String?
  targetDate                  DateTime?
  cumulativeTarget            String?
  targetNarrative             String?
  targetType                  String?
  responsiblePersons          String?
  createAt                    DateTime?                     @default(now())
  updateAt                    DateTime?                     @default(now())
  Output                      Output?                       @relation(fields: [outputId], references: [outputId])
  outputId                    String?
  outputIndicatorReportFormat OutputIndicatorReportFormat[]

  @@map("outputindicator")
}

model OutputIndicatorReportFormat {
  outputIndicatorReportFormatId String           @id @default(uuid())
  indicatorSource               String?
  thematicAreasOrPillar         String?
  indicatorStatement            String?
  responsiblePersons            String?
  disaggregationType            String?
  actualDate                    DateTime?
  cumulativeActual              String?
  actualNarrative               String?
  attachmentUrl                 String?
  createAt                      DateTime?        @default(now())
  updateAt                      DateTime?        @default(now())
  outputIndicator               OutputIndicator? @relation(fields: [outputIndicatorId], references: [outputIndicatorId])
  outputIndicatorId             String?

  @@map("outputindicatorreportformat")
}

// ACTIVITY RELATION

model Activity {
  activityId          String           @id @default(uuid())
  activityStatement   String?
  output              Output?          @relation(fields: [outputId], references: [outputId])
  outputId            String?
  activityTotalBudget Int?
  responsiblePerson   String?
  startDate           DateTime?
  endDate             DateTime?
  activityFrequency   Int?
  subActivity         String?
  descriptionAction   String?
  deliveryDate        DateTime?
  project             Project?         @relation(fields: [projectId], references: [projectId])
  projectId           String?
  createAt            DateTime?        @default(now())
  updateAt            DateTime?        @default(now())
  activityReport      ActivityReport[]

  @@map("activity")
}

model ActivityReport {
  activityReportId     String    @id @default(uuid())
  activity             Activity? @relation(fields: [activityId], references: [activityId])
  activityId           String?
  percentageCompletion Int?
  actualStartDate      DateTime?
  actualEndDate        DateTime?
  actualCost           Int?
  actualNarrative      String?
  createAt             DateTime? @default(now())
  updateAt             DateTime? @default(now())

  @@map("activityreport")
}

// LOGICAL FRAMEWORK
model LogicalFramework {
  logicalFrameworkId String    @id @default(uuid())
  project            Project?  @relation(fields: [projectId], references: [projectId])
  projectId          String?
  documentName       String?
  documentURL        String?
  createAt           DateTime? @default(now())
  updateAt           DateTime? @default(now())

  @@map("logicalframework")
}

// REQUEST
model Request {
  requestId                  String       @id @default(uuid())
  staff                      String?
  output                     Output?      @relation(fields: [outputId], references: [outputId])
  outputId                   String?
  activityTitle              String?
  activityBudgetCode         Int?
  activityLocation           String?
  activityPurposeDescription String?
  activityStartDate          DateTime?
  activityEndDate            DateTime?
  activityLineDescription    String?
  quantity                   Int?
  frequency                  Int?
  unitCost                   Int?
  budgetCode                 Int?
  total                      Int?
  modeOfTransport            String?
  driverName                 String?
  driversPhoneNumber         String?
  vehiclePlateNumber         String?
  vehicleColor               String?
  departureTime              DateTime?
  route                      String?
  recipientPhoneNumber       String?
  documentName               String?
  documentURL                String?
  project                    Project?     @relation(fields: [projectId], references: [projectId])
  projectId                  String?
  status                     String?
  createAt                   DateTime?    @default(now())
  updateAt                   DateTime?    @default(now())
  retirement                 Retirement[]

  @@map("request")
}

//Retirement
model Retirement {
  retirementId         String    @id @default(uuid())
  lineItem             String?
  actualCostOfLineItem Int?
  documentName         String?
  documentURL          String?
  request              Request?  @relation(fields: [requestId], references: [requestId])
  requestId            String?
  status               String?
  createAt             DateTime? @default(now())
  updateAt             DateTime? @default(now())

  @@map("retirement")
}
