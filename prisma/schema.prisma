// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//MODEL
model User {
  userId              String    @id @default(uuid())
  fullName            String?
  email               String?   @unique
  address             String?
  phoneNumber         String?
  role                Role?     @relation(fields: [roleId], references: [roleId])
  roleId              String?
  status              String?
  assignedProjectId   String?
  department          String?
  community           String?
  state               String?
  localGovernmentArea String?
  password            String?
  profilePic          String?
  profilePicMimeType  String?
  loginLast           DateTime?
  createAt            DateTime? @default(now())
  updateAt            DateTime? @default(now())

  @@map("users")
}

model GeneralSettings {
  generalSettingsId   String    @id @default(uuid())
  organizationName    String?
  contactEmail        String?
  contactPhone        String?
  website             String?
  organizationLogo    String?
  defaultCurrency     String?
  defaultTimeZone     String?
  dateRetentionPolicy String?
  auditLogRetention   String?
  emailNotification   Boolean?
  maintenanceAlert    Boolean?
  createAt            DateTime? @default(now())
  updateAt            DateTime? @default(now())

  @@map("generalsettings")
}

model Role {
  roleId      String    @id @default(uuid())
  roleName    String?
  description String?
  permission  String?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @default(now())
  users       User[]

  @@map("role")
}

model StrategicObjective {
  strategicObjectiveId String    @id @default(uuid())
  statement            String?
  thematicAreas        String?
  pillarLead           String?
  status               String?
  createAt             DateTime? @default(now())
  updateAt             DateTime? @default(now())
  kpi                  Kpi[]
  project              Project[]

  @@map("strategicObjective")
}

model Kpi {
  kpiId                String              @id @default(uuid())
  statement            String?
  definition           String?
  type                 String?
  specificAreas        String?
  unitOfMeasure        String?
  itemInMeasure        String?
  disaggregation       String?
  baseLine             String?
  target               String?
  strategicObjective   StrategicObjective? @relation(fields: [strategicObjectiveId], references: [strategicObjectiveId])
  strategicObjectiveId String?
  createAt             DateTime?           @default(now())
  updateAt             DateTime?           @default(now())

  @@map("kpi")
}

model Project {
  projectId             String              @id @default(uuid())
  projectName           String?
  budgetCurrency        String?
  totalBudgetAmount     String?
  startDate             DateTime?           @default(now())
  endDate               DateTime?           @default(now())
  country               String?
  state                 String?
  localGovernment       String?
  community             String?
  thematicAreasOrPillar String?
  status                String?
  strategicObjective    StrategicObjective? @relation(fields: [strategicObjectiveId], references: [strategicObjectiveId])
  strategicObjectiveId  String?
  createAt              DateTime?           @default(now())
  updateAt              DateTime?           @default(now())
  teamMember            TeamMember[]
  partner               Partner[]
  impact                Impact[]
  outcome               Outcome[]
  output                Output[]
  activity              Activity[]
  logicalFramework      LogicalFramework[]
  request               Request[]

  @@map("project")
}

model TeamMember {
  teamMemberId String    @id @default(uuid())
  email        String
  roleId       String
  project      Project?  @relation(fields: [projectId], references: [projectId])
  projectId    String?
  createAt     DateTime? @default(now())
  updateAt     DateTime? @default(now())

  @@map("teammember")
}

model Partner {
  partnerId        String    @id @default(uuid())
  organizationName String
  email            String
  roleId           String
  project          Project?  @relation(fields: [projectId], references: [projectId])
  projectId        String?
  createAt         DateTime? @default(now())
  updateAt         DateTime? @default(now())

  @@map("partner")
}

model ResultType {
  resultTypeId    String            @id @default(uuid())
  resultName      String
  impact          Impact[]
  outcome         Outcome[]
  output          Output[]
  Indicator       Indicator[]
  IndicatorReport IndicatorReport[]

  @@map("result_type")
}

// IMPACT RELATION

model Impact {
  impactId          String      @id @default(uuid())
  statement         String
  thematicArea      String
  responsiblePerson String
  project           Project?    @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?   @default(now())
  updateAt          DateTime?   @default(now())
  ResultType        ResultType? @relation(fields: [resultTypeId], references: [resultTypeId])
  resultTypeId      String?
  outcome           Outcome[]

  @@map("impact")
}

// OUTCOME RELATION

model Outcome {
  outcomeId         String      @id @default(uuid())
  outcomeStatement  String
  outcomeType       String
  impact            Impact?     @relation(fields: [impactId], references: [impactId])
  impactId          String?
  thematicAreas     String?
  responsiblePerson String
  project           Project?    @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?   @default(now())
  updateAt          DateTime?   @default(now())
  ResultType        ResultType? @relation(fields: [resultTypeId], references: [resultTypeId])
  resultTypeId      String?
  output            Output[]

  @@map("outcome")
}

// OUTPUT Relation

model Output {
  outputId          String      @id @default(uuid())
  outputStatement   String
  outcome           Outcome?    @relation(fields: [outcomeId], references: [outcomeId])
  outcomeId         String?
  thematicAreas     String?
  responsiblePerson String
  project           Project?    @relation(fields: [projectId], references: [projectId])
  projectId         String?
  createAt          DateTime?   @default(now())
  updateAt          DateTime?   @default(now())
  ResultType        ResultType? @relation(fields: [resultTypeId], references: [resultTypeId])
  resultTypeId      String?
  activity          Activity[]
  request           Request[]

  @@map("output")
}

model Disaggregation {
  disaggregationId         String                     @id @default(uuid())
  disaggregationName       String
  GenderDisaggregation     GenderDisaggregation[]
  ProductDisaggregation    ProductDisaggregation[]
  DepartmentDisaggregation DepartmentDisaggregation[]
  StateDisaggregation      StateDisaggregation[]
  TenureDisaggregation     TenureDisaggregation[]
  LgaDisaggregation        LgaDisaggregation[]
  AgeDisaggregation        AgeDisaggregation[]
  Indicator                Indicator[]
  IndicatorReport          IndicatorReport[]

  @@map("disaggregation")
}

model GenderDisaggregation {
  genderDisaggregationId String          @id @default(uuid())
  targetMale             Int?
  targetFemale           Int?
  actualMale             Int?
  actualFemale           Int?
  Disaggregation         Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId       String?
  indicator              Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId            String?

  @@map("gender_disaggregation")
}

model ProductDisaggregation {
  productDisaggregationId String          @id @default(uuid())
  productName             String?
  targetCount             Int?
  actualCount             Int?
  Disaggregation          Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId        String?
  indicator               Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId             String?

  @@map("product_disaggregation")
}

model DepartmentDisaggregation {
  departmentDisaggregationId String          @id @default(uuid())
  departmentName             String?
  targetCount                Int?
  actualCount                Int?
  Disaggregation             Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId           String?
  indicator                  Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId                String?

  @@map("department_disaggregation")
}

model StateDisaggregation {
  stateDisaggregationId String          @id @default(uuid())
  stateName             String?
  targetCount           Int?
  actualCount           Int?
  Disaggregation        Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId      String?
  indicator             Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId           String?

  @@map("state_disaggregation")
}

model LgaDisaggregation {
  lgaDisaggregationId String          @id @default(uuid())
  lgaName             String?
  targetCount         Int?
  actualCount         Int?
  Disaggregation      Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId    String?
  indicator           Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId         String?

  @@map("lga_disaggregation")
}

model TenureDisaggregation {
  tenureDisaggregationId String          @id @default(uuid())
  tenureName             String?
  targetCount            Int?
  actualCount            Int?
  Disaggregation         Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId       String?
  indicator              Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId            String?

  @@map("tenure_disaggregation")
}

model AgeDisaggregation {
  ageDisaggregationId String          @id @default(uuid())
  targetFrom                Int?
  targetTo                  Int?
  actualFrom                Int?
  actualTo                  Int?
  Disaggregation      Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId    String?
  indicator           Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId         String?

  @@map("age_disaggregation")
}

// indicator
model Indicator {
  indicatorId              String                     @id @default(uuid())
  indicatorSource          String?
  thematicAreasOrPillar    String?
  statement                String?
  linkKpiToSdnOrgKpi       String?
  definition               String?
  specificArea             String?
  unitOfMeasure            String?
  itemInMeasure            String?
  Disaggregation           Disaggregation?            @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId         String?
  baseLineDate             DateTime?
  cumulativeValue          Int?
  baselineNarrative        String?
  targetDate               DateTime?
  cumulativeTarget         Int?
  targetNarrative          String?
  targetType               String?
  responsiblePersons       String?
  createAt                 DateTime?                  @default(now())
  updateAt                 DateTime?                  @default(now())
  result                   String?
  ResultType               ResultType?                @relation(fields: [resultTypeId], references: [resultTypeId])
  resultTypeId             String?
  indicatorReport          IndicatorReport[]
  GenderDisaggregation     GenderDisaggregation[]
  ProductDisaggregation    ProductDisaggregation[]
  DepartmentDisaggregation DepartmentDisaggregation[]
  StateDisaggregation      StateDisaggregation[]
  LgaDisaggregation        LgaDisaggregation[]
  TenureDisaggregation     TenureDisaggregation[]
  AgeDisaggregation        AgeDisaggregation[]

  @@map("indicator")
}

//indicator report
model IndicatorReport {
  indicatorReportId     String          @id @default(uuid())
  indicatorSource       String?
  thematicAreasOrPillar String?
  indicatorStatement    String?
  responsiblePersons    String?
  Disaggregation        Disaggregation? @relation(fields: [disaggregationId], references: [disaggregationId])
  disaggregationId      String?
  actualDate            DateTime?
  cumulativeActual      String?
  actualNarrative       String?
  attachmentUrl         String?
  status                String?
  createAt              DateTime?       @default(now())
  updateAt              DateTime?       @default(now())
  indicator             Indicator?      @relation(fields: [indicatorId], references: [indicatorId])
  indicatorId           String?
  ResultType            ResultType?     @relation(fields: [resultTypeId], references: [resultTypeId])
  resultTypeId          String?

  @@map("indicator_report")
}

// ACTIVITY RELATION

model Activity {
  activityId          String           @id @default(uuid())
  activityStatement   String?
  output              Output?          @relation(fields: [outputId], references: [outputId])
  outputId            String?
  activityTotalBudget Int?
  responsiblePerson   String?
  startDate           DateTime?
  endDate             DateTime?
  activityFrequency   Int?
  subActivity         String?
  descriptionAction   String?
  deliveryDate        DateTime?
  project             Project?         @relation(fields: [projectId], references: [projectId])
  projectId           String?
  createAt            DateTime?        @default(now())
  updateAt            DateTime?        @default(now())
  activityReport      ActivityReport[]

  @@map("activity")
}

model ActivityReport {
  activityReportId     String    @id @default(uuid())
  activity             Activity? @relation(fields: [activityId], references: [activityId])
  activityId           String?
  percentageCompletion Int?
  actualStartDate      DateTime?
  actualEndDate        DateTime?
  actualCost           Int?
  actualNarrative      String?
  createAt             DateTime? @default(now())
  updateAt             DateTime? @default(now())

  @@map("activityreport")
}

// LOGICAL FRAMEWORK
model LogicalFramework {
  logicalFrameworkId String    @id @default(uuid())
  project            Project?  @relation(fields: [projectId], references: [projectId])
  projectId          String?
  documentName       String?
  documentURL        String?
  createAt           DateTime? @default(now())
  updateAt           DateTime? @default(now())

  @@map("logicalframework")
}

// REQUEST
model Request {
  requestId                  String       @id @default(uuid())
  staff                      String?
  output                     Output?      @relation(fields: [outputId], references: [outputId])
  outputId                   String?
  activityTitle              String?
  activityBudgetCode         Int?
  activityLocation           String?
  activityPurposeDescription String?
  activityStartDate          DateTime?
  activityEndDate            DateTime?
  activityLineDescription    String?
  quantity                   Int?
  frequency                  Int?
  unitCost                   Int?
  budgetCode                 Int?
  total                      Int?
  modeOfTransport            String?
  driverName                 String?
  driversPhoneNumber         String?
  vehiclePlateNumber         String?
  vehicleColor               String?
  departureTime              DateTime?
  route                      String?
  recipientPhoneNumber       String?
  documentName               String?
  documentURL                String?
  project                    Project?     @relation(fields: [projectId], references: [projectId])
  projectId                  String?
  status                     String?
  createAt                   DateTime?    @default(now())
  updateAt                   DateTime?    @default(now())
  retirement                 Retirement[]

  @@map("request")
}

//Retirement
model Retirement {
  retirementId            String    @id @default(uuid())
  activityLineDescription String?
  quantity                Int?
  frequency               Int?
  unitCost                Int?
  actualCost              Int?
  totalBudget             Int?
  documentName            String?
  documentURL             String?
  request                 Request?  @relation(fields: [requestId], references: [requestId])
  requestId               String?
  status                  String?
  createAt                DateTime? @default(now())
  updateAt                DateTime? @default(now())

  @@map("retirement")
}
